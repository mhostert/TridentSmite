#ifndef INTEGRATOR_H_
#define INTEGRATOR_H_


#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <vector>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_randist.h>
#include <fstream>
#include <sstream>
#include <string> 
#include <ctime>
#include <iomanip>      // std::setprecision
#include<zlib.h>

using namespace std::chrono;

#include "cnpy.h"
#include "integrands.h"


//////////////////////////////////////////////////////
// Class that will contain all the userdata to be passed to INTEGRAND
class tridentMC{
  public:


    trident_channel channel(int C);

    int nu_alpha;
    int l1,l2,A,Z;
    int PDG_nu_inc,PDG_nu_out,PDG_lp,PDG_lm,PDG_had;
    int IS_NUBAR = 0;

    // lepton and hadron masses
    long double ml1,ml2,Mn;

    // Will contain BSM parameters
    std::vector<long double> params;

    // Will contain the choice for what amplitude terms to include
    std::vector<long double> terms;

    // neutrino energy when fixed
    long double nu_energy;

    // boundaries of Q integration for EPA implementation
    long double Qcut_coh, Qmin_dif, Qmax_dif;

    // Axial and vector couplings in the SM
    long double Aijk, Vijk;
    
    // vertex terms for vector^2, vector-axial, axial-axial amplitudes
    long double V2,VA,A2;

    // New physics couplings and masses
    long double CHARGE, mzprime, gprimeA, gprimeV;

    // integrand differential cross section
    std::vector<long double> dsigma;

    // integration vars in terms of physical vars
    std::vector<long double> xphys;

    // target to achieve for number of events generated by vegas
    int aim_vegas_events; 
    
    // total number of events generated by vegas
    int total_vegas_events; 
   
    // corrects the weights with overall integral and integral in last iter
    long double weight_correction;
   
    // stores the cuba samples
    std::vector<std::vector<long double>> cuba_samples; 

    // stores the cuba samples
    std::vector<std::vector<std::vector<long double>>> vector3d_of_P; 

    // flux file
    std::ifstream my_flux;

    int E_FLAG;
    int SAMPLES_FLAG;
    int TOTAL_DIAGRAMS;
    int PAULI_BLOCKING = W_BLOCKING;

    // Flux variables
    std::vector<long double> E_flux, nu_flux;
    long double Emax, Emin;
    // int Ei;
    
    // Vegas helper variables
    int comp, regions, neval, fail, counter;

    cubareal integral[NCOMP], error[NCOMP], chi2prob[NCOMP];
    cubareal integral_L[NCOMP], error_L[NCOMP], chi2prob_L[NCOMP];
    cubareal integral_T[NCOMP], error_T[NCOMP], chi2prob_T[NCOMP];

    tridentMC(int , int , int , long double, std::vector<long double> params, int aim_vegas_events_arg);

    void open_flux_file(std::string , long double, long double);

    long double integrate_wflux(void *, int );
    long double integrate_wflux_wsamples(void *, int , std::string );

    long double integrate_energy(void *, long double  ,int );
    long double integrate_energy_wsamples(void *, long double  ,int , std::string );

    long double compute_total_xsec_energy(void * integrando, long double Enu, int ndim);

    long double final_xsec(long double gprimeV, long double gprimeA, long double CHARGE);    

    int generate_kinematics();
    
    
    int save_to_text(std::string eventsfile);
    
    int save_to_npy(std::string eventsfile);

    int save_to_HEPevt(std::string , int );

};

#endif